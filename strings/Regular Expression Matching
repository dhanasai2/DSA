class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;

        // Handle patterns that can match an empty string (e.g., a*, a*b*, etc.)
        for (int j = 2; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                dp[0][j] = dp[0][j - 2];
            }
        }

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                char pc = p.charAt(j - 1);

                if (pc != '*') {
                    boolean charMatch = pc == '.' || pc == s.charAt(i - 1);
                    dp[i][j] = charMatch && dp[i - 1][j - 1];
                } else {  // '*' case
                    char prev = p.charAt(j - 2);          // element being repeated
                    boolean zeroOccur = dp[i][j - 2];     // skip "prev*"
                    boolean oneOrMore = (prev == '.' || prev == s.charAt(i - 1)) && dp[i - 1][j];
                    dp[i][j] = zeroOccur || oneOrMore;
                }
            }
        }
        return dp[m][n];
    }
}
